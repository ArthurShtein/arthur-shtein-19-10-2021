{"version":3,"sources":["utils.js","weatherService/weatherService.js","store/actions/weatherAction.js","cmps/SingleFavouriteCity/SingleFavouriteCity.jsx","cmps/Favourites/Favourites.jsx","cmps/Header/Header.jsx","cmps/CurrentDay/CurrentDay.jsx","cmps/SingleDayForecast/SingleDayForecast.jsx","cmps/FiveDaysForecast/FiveDaysForecast.jsx","cmps/Home/Home.jsx","App.jsx","store/reducers/weatherReducer.js","store/index.js","index.js"],"names":["utilService","padNum","number","strNum","length","checkFavouritesDuplication","favCountry","arr","countriesFromLocal","loadFromStorage","push","saveToStorage","cToF","fTemp","fToCel","Math","floor","key","data","json","JSON","stringify","localStorage","setItem","getItem","parse","weatherService","getCurrentLocation","getAutoComplete","getFiveDaysForecast","organizeAutoComplete","map","item","label","LocalizedName","Key","checkFavourites","city","favCountrys","favCountrysFromLocal","find","cityName","noDuplicationsFavs","filter","API_KEY","locationKey","a","axios","get","console","log","searchValue","DailyForecasts","loadFiveDaysForecast","cityKey","dispatch","fiveDaysResult","type","SingleFavouriteCity","temp","icon","degreeType","useSelector","state","weatherModule","isCelcius","history","useHistory","useDispatch","celciusTemp","className","onClick","name","pathname","src","alt","Favourites","useState","favourites","setFavourites","favCitysFromLocal","favFromState","useEffect","index","Header","to","CurrentDay","isFavourite","setIsFavourite","setDayFromState","singleForecast","Button","variant","cityObject","finalFavourites","SingleDayForecast","weatherType","Day","IconPhrase","minTemp","Temperature","Minimum","Value","maxTemp","Maximum","newDate","Date","getDay","weekDay","Array","cMinTemp","cMaxTemp","Icon","FiveDaysForecast","keyResult","currentCityKey","fiveDaysForecast","Home","inputData","setInputData","setCityKey","setCityName","setClassName","celcius","setCelcius","locationFromState","currentLocation","keyFromState","inputResults","searchOptions","result","currentLocationResult","Imperial","singleNameKey","WeatherIcon","saveSingleForecast","FormGroup","FormControlLabel","control","Switch","defaultChecked","color","boolean","Autocomplete","disablePortal","options","sx","width","onInputChange","e","text","target","value","autoCompleteResult","onChange","option","renderInput","params","TextField","App","excact","path","component","INITIAL_STATE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c9a7816.chunk.js","sourcesContent":["export const utilService = {\r\n  padNum,\r\n  checkFavouritesDuplication,\r\n  saveToStorage,\r\n  loadFromStorage,\r\n  cToF,\r\n};\r\n\r\nfunction padNum(number) {\r\n  const strNum = number + \"\";\r\n  if (strNum.length === 1) {\r\n    return \"0\" + strNum;\r\n  } else {\r\n    return strNum;\r\n  }\r\n}\r\n\r\nfunction checkFavouritesDuplication(favCountry) {\r\n  let arr = [];\r\n\r\n  const countriesFromLocal = loadFromStorage(\"favourites\");\r\n  if (!countriesFromLocal) {\r\n    arr.push(favCountry);\r\n    saveToStorage(\"favourites\", arr);\r\n    return arr;\r\n  } else {\r\n    arr = countriesFromLocal;\r\n    arr.push(favCountry);\r\n    saveToStorage(\"favourites\", arr);\r\n    return arr;\r\n  }\r\n}\r\n\r\n  function cToF(fTemp) {\r\n    var fToCel = ((fTemp - 32) * 5) / 9;\r\n    return Math.floor(fToCel);\r\n  }\r\n\r\nfunction saveToStorage(key, data) {\r\n  var json = JSON.stringify(data);\r\n  localStorage.setItem(key, json);\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n  var json = localStorage.getItem(key);\r\n  var data = JSON.parse(json);\r\n  return data;\r\n}\r\n","import axios from \"axios\";\r\nimport { utilService } from \"../utils\";\r\n\r\nexport const weatherService = {\r\n  getCurrentLocation,\r\n  getAutoComplete,\r\n  getFiveDaysForecast,\r\n  organizeAutoComplete,\r\n  checkFavourites,\r\n};\r\n\r\n// const API_KEY = \"O8PwbBOpA3ugM6K1RbYuVKYOGk1fI1mf\";\r\nconst API_KEY = \"4aBBAPNL6URV8G56agI6OJks01WPFlSa\";\r\n\r\n// CURRENT LOCATION API\r\nasync function getCurrentLocation(locationKey) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${API_KEY}`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// AUTO COMPLETE API\r\nasync function getAutoComplete(searchValue) {\r\n  try {\r\n    let { data } = await axios.get(\r\n      `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${searchValue}`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// 5 DAYS FORECAST API\r\nasync function getFiveDaysForecast(locationKey) {\r\n  try {\r\n    let { data } = await axios.get(\r\n      `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}`\r\n    );\r\n    return data.DailyForecasts;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction organizeAutoComplete(arr) {\r\n  return arr.map((item) => {\r\n    return { label: item.LocalizedName, Key: item.Key };\r\n  });\r\n}\r\n\r\nfunction checkFavourites(city) {\r\n  let favCountrys = [];\r\n  let favCountrysFromLocal = utilService.loadFromStorage(\"favourites\"); //NULL\r\n  if (favCountrysFromLocal) favCountrys = favCountrysFromLocal;\r\n\r\n  const checkCityInFav = favCountrys.find(\r\n    (item) => item.cityName === city.cityName\r\n  );\r\n  if (!checkCityInFav) {\r\n    favCountrys.push(city);\r\n    utilService.saveToStorage(\"favourites\", favCountrys);\r\n    return favCountrys;\r\n  } else {\r\n    const noDuplicationsFavs = favCountrys.filter(\r\n      (item) => item.cityName !== city.cityName\r\n    );\r\n    utilService.saveToStorage(\"favourites\", noDuplicationsFavs);\r\n    return noDuplicationsFavs;\r\n  }\r\n}\r\n","import { weatherService } from \"../../weatherService/weatherService\";\r\n\r\nexport function loadAutoComplete(searchValue) {\r\n  return async (dispatch) => {\r\n    const autoCompleteResult = await weatherService.getAutoComplete(\r\n      searchValue\r\n    );\r\n    dispatch({ type: \"SET_SEARCH_OPTIONS\", autoCompleteResult });\r\n  };\r\n}\r\n\r\nexport function loadFiveDaysForecast(cityKey) {\r\n  return async (dispatch) => {\r\n    const fiveDaysResult = await weatherService.getFiveDaysForecast(cityKey);\r\n    dispatch({ type: \"SET_FIVE_DAYS_FORECAST\", fiveDaysResult });\r\n  };\r\n}\r\n\r\nexport function saveToFavourites(city) {\r\n  return (dispatch) => {\r\n    const finalFavourites = weatherService.checkFavourites(city);\r\n    dispatch({ type: \"SET_FAVOURITES\", finalFavourites });\r\n  };\r\n}\r\n\r\nexport function setToCelcius(boolean) {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"SET_TO_CELCIUS\", boolean });\r\n  };\r\n}\r\n\r\nexport function saveNewCityKey(key) {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"SET_CITY_KEY\", key });\r\n  };\r\n}\r\n\r\nexport function saveNewCityName(name) {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"SET_CURRENT_LOCATION\", name });\r\n  };\r\n}\r\n\r\nexport function toggleIsFavourite(cityObject) {\r\n  return (dispatch) => {\r\n    cityObject.isFavourite = !cityObject.isFavourite;\r\n    dispatch({ type: \"TOGGLE_FAVOURITE_CITY\", cityObject });\r\n  };\r\n}\r\n\r\nexport function saveSingleForecast(name, cityKey) {\r\n  return async (dispatch) => {\r\n    const currentLocationResult = await weatherService.getCurrentLocation(\r\n      cityKey\r\n    );\r\n    const fTemp = currentLocationResult[0].Temperature.Imperial.Value;\r\n    const singleNameKey = {\r\n      cityName: name,\r\n      cityKey: cityKey,\r\n      temp: fTemp,\r\n      icon: currentLocationResult[0].WeatherIcon,\r\n      isFavourite: false,\r\n    };\r\n    dispatch({ type: \"SET_SINGLE_FORECAST\", singleNameKey });\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { utilService } from \"../../utils\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  saveNewCityKey,\r\n  saveNewCityName,\r\n} from \"../../store/actions/weatherAction\";\r\nimport \"./SingleFavouriteCity.css\";\r\n\r\nexport const SingleFavouriteCity = ({ city }) => {\r\n  const { cityName, cityKey, temp, icon } = city;\r\n\r\n  const degreeType = useSelector((state) => state.weatherModule.isCelcius);\r\n\r\n  let history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const goToHomePage = () => {\r\n    history.push({\r\n      pathname: \"/\",\r\n    });\r\n  };\r\n  const handleClick = () => {\r\n    dispatch(saveNewCityKey(cityKey));\r\n    dispatch(saveNewCityName(cityName));\r\n    goToHomePage();\r\n  };\r\n\r\n  let celciusTemp = utilService.cToF(temp);\r\n  return (\r\n    <div className=\"single-fav-container\" onClick={handleClick}>\r\n      <img\r\n        className=\"main-img\"\r\n        src={`https://developer.accuweather.com/sites/default/files/${utilService.padNum(\r\n          icon\r\n        )}-s.png`}\r\n        alt=\"\"\r\n      />\r\n      <h2>{cityName} </h2>\r\n      {degreeType ? <p> {celciusTemp}C° </p> : <p> {temp}F° </p>}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { SingleFavouriteCity } from \"../SingleFavouriteCity/SingleFavouriteCity\";\r\nimport \"./Favourites.css\";\r\n\r\nexport const Favourites = () => {\r\n  const [favourites, setFavourites] = useState([]);\r\n\r\n  let favCitysFromLocal = JSON.parse(localStorage.getItem(\"favourites\"));\r\n  let favFromState = useSelector((state) => state.weatherModule.favourites);\r\n\r\n  if (favCitysFromLocal) {\r\n    favFromState = favCitysFromLocal;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setFavourites(favFromState);\r\n  }, []);\r\n\r\n  if (!favourites)\r\n    <div>\r\n      <h2> No Favourites Citys </h2>\r\n    </div>;\r\n\r\n  return (\r\n    <div className=\"favourites-container\">\r\n      {favourites.map((city, index) => {\r\n        return (\r\n          <SingleFavouriteCity key={index} city={city}></SingleFavouriteCity>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header>\r\n      <div> Weather App </div>\r\n      <div className='links'>\r\n        <Link to=\"/\"> Home </Link>\r\n        <Link to=\"/favourites\"> Favourites </Link>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  saveToFavourites,\r\n  toggleIsFavourite,\r\n} from \"../../store/actions/weatherAction.js\";\r\n\r\nimport \"./CurrentDay.css\";\r\nimport { utilService } from \"../../utils.js\";\r\nimport Button from \"@mui/material/Button\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\nexport const CurrentDay = ({ cityName }) => {\r\n  const dispatch = useDispatch();\r\n  const [isFavourite, setIsFavourite] = useState(false);\r\n  const [dayFromState, setDayFromState] = useState(\"\");\r\n\r\n  const singleForecast = useSelector(\r\n    (state) => state.weatherModule.singleForecast\r\n  );\r\n\r\n  const degreeType = useSelector((state) => state.weatherModule.isCelcius);\r\n\r\n  let fTemp = singleForecast.temp;\r\n  let celciusTemp = utilService.cToF(fTemp);\r\n\r\n  function handleClick() {\r\n    dispatch(toggleIsFavourite(singleForecast));\r\n    setIsFavourite(singleForecast.isFavourite);\r\n    dispatch(saveToFavourites(singleForecast));\r\n  }\r\n\r\n  const checkFromFavourites = () => {\r\n    if (singleForecast.isFavourite) {\r\n      setIsFavourite(true);\r\n    } else {\r\n      setIsFavourite(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkFromFavourites();\r\n    setDayFromState(singleForecast.cityName);\r\n  }, [isFavourite]);\r\n\r\n  return (\r\n    <div className=\"main-curr-day\">\r\n      <div className=\"curr-day-container\">\r\n        <div className=\"left-section\">\r\n          <img\r\n            className=\"main-img\"\r\n            src={`https://developer.accuweather.com/sites/default/files/${utilService.padNum(\r\n              singleForecast.icon\r\n            )}-s.png`}\r\n            alt=\"\"\r\n          />\r\n          <div>\r\n            <h1> {singleForecast.cityName} </h1>\r\n            {degreeType ? <h3> {celciusTemp}C°</h3> : <h3>{fTemp}F° </h3>}\r\n          </div>\r\n        </div>\r\n        <div className=\"right-section\">\r\n          {isFavourite ? (\r\n            <FavoriteIcon className=\"full-icon\" />\r\n          ) : (\r\n            <FavoriteBorderIcon className=\"icon\"> </FavoriteBorderIcon>\r\n          )}\r\n          <Button variant=\"contained\" onClick={handleClick}>\r\n            Save to favourites\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentDay;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { utilService } from \"../../utils.js\";\r\nimport \"./SingleDayForecast.css\";\r\n\r\nexport const SingleDayForecast = ({ item }) => {\r\n  const weatherType = item.Day.IconPhrase;\r\n  const minTemp = item.Temperature.Minimum.Value;\r\n  const maxTemp = item.Temperature.Maximum.Value;\r\n\r\n  const degreeType = useSelector((state) => state.weatherModule.isCelcius);\r\n\r\n  const newDate = new Date(item.Date).getDay();\r\n  const weekDay = new Array(7);\r\n  weekDay[0] = \"Sunday\";\r\n  weekDay[1] = \"Monday\";\r\n  weekDay[2] = \"Tuesday\";\r\n  weekDay[3] = \"Wednseday\";\r\n  weekDay[4] = \"Thursday\";\r\n  weekDay[5] = \"Friday\";\r\n  weekDay[6] = \"Saturday\";\r\n\r\n  let cMinTemp = utilService.cToF(minTemp);\r\n  let cMaxTemp = utilService.cToF(maxTemp);\r\n\r\n  if (!item) return <div> Loading ... </div>;\r\n  return (\r\n    <div className=\"single-day-container\">\r\n      <div>\r\n        <img\r\n          src={`https://developer.accuweather.com/sites/default/files/${utilService.padNum(\r\n            item.Day.Icon\r\n          )}-s.png`}\r\n          alt={weatherType}\r\n        />\r\n      </div>\r\n      <h3> {weekDay[newDate]}</h3>\r\n      <h5>{weatherType}</h5>\r\n      {degreeType ? (\r\n        <p>\r\n          {cMinTemp}C° - {cMaxTemp}C°\r\n        </p>\r\n      ) : (\r\n        <p>\r\n          {minTemp}F° - {maxTemp}F°\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadFiveDaysForecast } from \"../../store/actions/weatherAction\";\r\nimport { SingleDayForecast } from \"../SingleDayForecast/SingleDayForecast\"\r\nimport './FiveDaysForecast.css'\r\n\r\nexport const FiveDaysForecast = () => {\r\n  const keyResult = useSelector((state) => state.weatherModule.currentCityKey); // PROPS MAYBE?\r\n  const fiveDaysForecast = useSelector(\r\n    (state) => state.weatherModule.fiveDaysForecast\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(loadFiveDaysForecast(keyResult));\r\n  }, [keyResult]);\r\n\r\n  return (\r\n    <div className='five-days-container'>\r\n      {fiveDaysForecast.map((item, index) =>{ \r\n          return <SingleDayForecast key={index} item={item}/>\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport {\r\n  loadAutoComplete,\r\n  saveSingleForecast,\r\n  loadFiveDaysForecast,\r\n  setToCelcius,\r\n} from \"../../store/actions/weatherAction\";\r\n\r\nimport CurrentDay from \"../CurrentDay/CurrentDay\";\r\nimport { weatherService } from \"../../weatherService/weatherService\";\r\nimport { FiveDaysForecast } from \"../FiveDaysForecast/FiveDaysForecast\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\n\r\nimport \"./Home.css\";\r\n\r\nexport const Home = () => {\r\n  const [inputData, setInputData] = useState([]);\r\n  const [cityKey, setCityKey] = useState(\"215854\");\r\n  const [cityName, setCityName] = useState(\"Tel Aviv\");\r\n  const [className, setClassName] = useState(\"\");\r\n  const [celcius, setCelcius] = useState(true);\r\n\r\n  let locationFromState = useSelector(\r\n    (state) => state.weatherModule.currentLocation\r\n  );\r\n  let keyFromState = useSelector((state) => state.weatherModule.currentCityKey);\r\n\r\n  const dispatch = useDispatch();\r\n  const inputResults = useSelector(\r\n    (state) => state.weatherModule.searchOptions\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    const text = e.target.value;\r\n    dispatch(loadAutoComplete(text));\r\n  };\r\n\r\n  const handleChanges = (key, label) => {\r\n    setCityKey(key);\r\n    setCityName(label);\r\n  };\r\n\r\n  const changeTheme = () => {\r\n    if (!className.length) {\r\n      setClassName(\"darkmode\");\r\n    } else {\r\n      setClassName(\"\");\r\n    }\r\n  };\r\n\r\n  const changeToCelcius = () => {\r\n    setCelcius(!celcius);\r\n    dispatch(setToCelcius(celcius));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const result = weatherService.organizeAutoComplete(inputResults);\r\n    setCityName(locationFromState);\r\n    setCityKey(keyFromState);\r\n    setInputData(result);\r\n    dispatch(saveSingleForecast(cityName, cityKey));\r\n    dispatch(loadFiveDaysForecast(cityKey));\r\n  }, [inputResults, cityKey, cityName, className]);\r\n\r\n  return (\r\n    <>\r\n      <div className={className}>\r\n        <div className=\"input-header\">\r\n          <div className=\"buttons-container\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={<Switch defaultChecked onClick={changeTheme} />}\r\n                label=\"Theme Switcher\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    defaultChecked\r\n                    color=\"warning\"\r\n                    onClick={changeToCelcius}\r\n                  />\r\n                }\r\n                label=\"Temperature Switcher\"\r\n              />\r\n            </FormGroup>\r\n          </div>\r\n          <h2 className=\"header-search\">Search The Weather In Any City</h2>\r\n          <Autocomplete\r\n            className=\"input\"\r\n            disablePortal\r\n            options={inputData}\r\n            sx={{ width: 300 }}\r\n            onInputChange={handleChange}\r\n            onChange={(e, option) => handleChanges(option.Key, option.label)}\r\n            renderInput={(params) => <TextField {...params} label=\"City\" />}\r\n          />\r\n        </div>\r\n        <CurrentDay cityName={cityName} />\r\n        <FiveDaysForecast />\r\n        <h4 className=\"by\"> Made by Arthur Shtein</h4>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { Favourites } from \"./cmps/Favourites/Favourites\";\r\nimport { Header } from \"./cmps/Header/Header\";\r\nimport { Home } from \"./cmps/Home/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <Header></Header>\r\n      <main>\r\n        <Switch>\r\n          <Route excact path=\"/favourites\" component={Favourites} />\r\n          <Route excact path=\"/\" component={Home} />\r\n        </Switch>\r\n      </main>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const INITIAL_STATE = {\r\n  currentLocation: \"Tel Aviv\",\r\n  currentCityKey: \"215854\",\r\n  fiveDaysForecast: [],\r\n  searchOptions: [],\r\n  singleForecast: {},\r\n  favourites: [],\r\n  isCelcius: false,\r\n};\r\n\r\nexport function weatherReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case \"SET_CURRENT_LOCATION\":\r\n      return {\r\n        ...state,\r\n        currentLocation: action.name,\r\n      };\r\n    case \"SET_SEARCH_OPTIONS\":\r\n      return {\r\n        ...state,\r\n        searchOptions: action.autoCompleteResult,\r\n      };\r\n    case \"SET_CITY_KEY\":\r\n      return {\r\n        ...state,\r\n        currentCityKey: action.key,\r\n      };\r\n    case \"SET_FIVE_DAYS_FORECAST\":\r\n      return {\r\n        ...state,\r\n        fiveDaysForecast: action.fiveDaysResult,\r\n      };\r\n    case \"SET_SINGLE_FORECAST\":\r\n      return {\r\n        ...state,\r\n        singleForecast: action.singleNameKey,\r\n      };\r\n    case \"SET_FAVOURITES\":\r\n      return {\r\n        ...state,\r\n        favourites: action.finalFavourites,\r\n      };\r\n    case \"SET_TO_CELCIUS\":\r\n      return {\r\n        ...state,\r\n        isCelcius: action.boolean,\r\n      };\r\n    case \"TOGGLE_FAVOURITE_CITY\":\r\n      return {\r\n        ...state,\r\n        singleForecast: action.cityObject,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { weatherReducer } from './reducers/weatherReducer'\r\n\r\n// Connecting redux devtools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// Combining reducers into one\r\nconst rootReducer = combineReducers({\r\n  weatherModule: weatherReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.jsx\";\r\nimport { store } from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}